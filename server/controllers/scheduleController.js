const Schedule = require('../models/Schedule');
const { generateWorkoutPlan } = require('../services/workoutService');

// Tạo lịch tập
exports.createSchedule = async (req, res) => {
    const { dayOfWeek, exercises, autoGenerated } = req.body;
    try {
        if (!dayOfWeek || !Array.isArray(dayOfWeek) || dayOfWeek.length === 0) {
            return res.status(400).json({ msg: 'dayOfWeek phải là mảng không rỗng' });
        }
        if (!exercises || !Array.isArray(exercises) || exercises.length === 0) {
            return res.status(400).json({ msg: 'exercises phải là mảng không rỗng' });
        }
        if (!req.user?.userId) {
            return res.status(401).json({ msg: 'Không tìm thấy userId trong token' });
        }

        const validDays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
        if (!dayOfWeek.every(day => validDays.includes(day))) {
            return res.status(400).json({ msg: 'Một hoặc nhiều ngày trong dayOfWeek không hợp lệ' });
        }

        const schedules = dayOfWeek.map(day => ({
            userId: req.user.userId,
            dayOfWeek: [day],
            exercises,
            autoGenerated: autoGenerated || false
        }));
        const savedSchedules = await Schedule.insertMany(schedules);
        res.json(savedSchedules);
    } catch (err) {
        console.error('Error in createSchedule:', err.message, err.stack);
        res.status(500).json({ msg: 'Lỗi server', error: err.message });
    }
};

// Lấy lịch tập theo ngày
exports.getSchedule = async (req, res) => {
    try {
        if (!req.user?.userId) {
            return res.status(401).json({ msg: 'Không tìm thấy userId trong token' });
        }
        if (!req.params.date) {
            return res.status(400).json({ msg: 'Thiếu tham số date' });
        }

        const date = new Date(req.params.date);
        if (isNaN(date.getTime())) {
            return res.status(400).json({ msg: 'Định dạng ngày không hợp lệ' });
        }

        let schedule = await Schedule.findOne({
            userId: req.user.userId,
            dayOfWeek: date.toLocaleDateString('en-US', { weekday: 'long' })
        }).lean();
        if (!schedule) {
            schedule = await generateWorkoutPlan(date, req.user.userId);
            if (schedule) {
                const newSchedule = new Schedule(schedule);
                await newSchedule.save();
                res.json(newSchedule);
            } else {
                res.json({});
            }
        } else {
            res.json(schedule);
        }
    } catch (err) {
        console.error('Error in getSchedule:', err.message, err.stack);
        res.status(500).json({ msg: 'Lỗi server', error: err.message });
    }
};
// Lấy tất cả lịch tập
exports.getAllSchedules = async (req, res) => {
    try {
        const schedules = await Schedule.find().populate('userId', 'username').lean();
        res.json(schedules);
    } catch (err) {
        console.error('Error in getAllSchedules:', err.message, err.stack);
        res.status(500).json({ msg: 'Lỗi server', error: err.message });
    }
};
// Lấy lịch tập của người dùng
exports.getUserSchedules = async (req, res) => {
    try {
        if (!req.user?.userId) {
            return res.status(401).json({ msg: 'Không tìm thấy userId trong token' });
        }
        const schedules = await Schedule.find({ userId: req.user.userId }).populate('userId', 'username').lean();
        res.json(schedules);
    } catch (err) {
        console.error('Error in getUserSchedules:', err.message, err.stack);
        res.status(500).json({ msg: 'Lỗi server', error: err.message });
    }
};

//Sửa lịch tập
exports.updateSchedule = async (req, res) => {
  try {
    const scheduleId = req.params.id;
    if (!req.user?.userId) {
      return res.status(401).json({ msg: 'Không tìm thấy userId trong token' });
    }

    const { dayOfWeek, exercises } = req.body;

    if (!dayOfWeek || !Array.isArray(dayOfWeek) || dayOfWeek.length === 0) {
      return res.status(400).json({ msg: 'dayOfWeek phải là mảng không rỗng' });
    }

    const validDays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
    if (!dayOfWeek.every(day => validDays.includes(day))) {
      return res.status(400).json({ msg: 'Một hoặc nhiều ngày trong dayOfWeek không hợp lệ' });
    }

    if (!exercises || !Array.isArray(exercises) || exercises.length === 0) {
      return res.status(400).json({ msg: 'exercises phải là mảng không rỗng' });
    }

    // Tìm schedule
    const schedule = await Schedule.findById(scheduleId);
    if (!schedule) {
      return res.status(404).json({ msg: 'Không tìm thấy lịch tập' });
    }

    // Kiểm tra quyền sở hữu
    if (schedule.userId.toString() !== req.user.userId) {
      return res.status(403).json({ msg: 'Bạn không có quyền chỉnh sửa lịch tập này' });
    }

    // Update
    schedule.dayOfWeek = dayOfWeek;
    schedule.exercises = exercises;
    await schedule.save();

    res.json(schedule);
  } catch (err) {
    console.error('Error in updateSchedule:', err.message, err.stack);
    res.status(500).json({ msg: 'Lỗi server', error: err.message });
  }
};
